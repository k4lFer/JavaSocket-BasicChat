/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.jpsocket.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import javax.swing.JOptionPane;

/**
 *
 * @author k4lfer
 */
public class JFClient extends javax.swing.JFrame implements Runnable{
    private String name;
    private Socket socket;
    private DataInputStream input;
    private DataOutputStream output;

    /**
     * Creates new form JFClient
     */
    public JFClient() {
        initComponents();
        jTFInputMessage.setEditable(false);
        jBttnSend.setEnabled(false);
        messageArea.setEditable(false);
    }

    // Conectar al servidor
    private void connect() {
        try {
            socket = new Socket("127.0.0.1", 9999); // Conectar al servidor en localhost y puerto 9999
            input = new DataInputStream(socket.getInputStream()); // Stream de entrada
            output = new DataOutputStream(socket.getOutputStream()); // Stream de salida

            Thread thread = new Thread(this); // Crea un nuevo hilo
            thread.start(); // Hilo que escucha mensajes del servidor

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo conectar al servidor: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Enviar mensaje al servidor
    private void enviarMensaje() {
        try {
            output.writeUTF(name + ": " + jTFInputMessage.getText()); // Envía el mensaje al servidor con el nombre del usuario
            jTFInputMessage.setText(""); // Limpia el campo de entrada de mensaje
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al enviar mensaje: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBttnSend = new javax.swing.JButton();
        jTFInputMessage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        jTFName = new javax.swing.JTextField();
        jBttnRegister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBttnSend.setText("Send");
        jBttnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttnSendActionPerformed(evt);
            }
        });

        messageArea.setColumns(20);
        messageArea.setRows(5);
        jScrollPane1.setViewportView(messageArea);

        jTFName.setToolTipText("");

        jBttnRegister.setText("Register");
        jBttnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTFInputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBttnSend))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTFName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBttnRegister)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBttnRegister))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFInputMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBttnSend))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBttnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttnSendActionPerformed
        enviarMensaje();
    }//GEN-LAST:event_jBttnSendActionPerformed

    private void jBttnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttnRegisterActionPerformed
        // TODO add your handling code here:
        name = jTFName.getText().trim();
        if(name.isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Please enter your name", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            jTFName.setEditable(false);
            jBttnRegister.setEnabled(false);
            jTFInputMessage.setEditable(true);
            jBttnSend.setEnabled(true);
            connect();
        }
    }//GEN-LAST:event_jBttnRegisterActionPerformed



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBttnRegister;
    private javax.swing.JButton jBttnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFInputMessage;
    private javax.swing.JTextField jTFName;
    private javax.swing.JTextArea messageArea;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void run() {
        try {
            while (!socket.isClosed()) { // Mientras el socket no esté cerrado
                // Lee el mensaje enviado por el servidor
                String msg = input.readUTF();
                messageArea.append(msg + "\n");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Conexión perdida: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally { // Bloque finally para cerrar recursos
            // Cierra los streams de entrada y salida
            try {
                if (socket != null) socket.close(); // Cierra el socket
            } catch (IOException ignored) {
                JOptionPane.showMessageDialog(this, "Error al cerrar la conexión: " + ignored.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } 
        }
    }
}
